
==========================================
==========================================
1.几个方法：
1.获取线程名称：
主线程：main
新线程：Thread-0   Thread-1   Thread-2  
------------- 
方法一：getName()
------>Thread-0   Thread-1   Thread-2  
方法二：Thread t = Thread.currentThread();
	System.out.println(t);
------>Thread[Thread-0,5,main]
可以通过Thread.currentThread().getName()直接输出主线程的名称，
因为主线程没有继承Thread，必须通过thread的类方法
-----------------------
2.设置线程名称：
 * 1.void setName(String name) 改变该线程的名称等于参数 name。  
 * 2.创建一个带参构造方法，参数传递线程的名称，调用父类的带参构造方法，
 * 	把名称传递给父类，让父类(Thread)给子线程取个名字
 * 	Thread(String name) 分配一个新的 Thread对象。
 */
public MyThread01(String name) {
	super(name);
}
new MyThread01("旺财").start();
----------------------
3.设置线程暂停时间。(毫秒）
public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。
Thread.sleep(1000);
===========================
===========================
===========================
2.
/*创建多线程程序方式一：
 * java.lang.Thread
 * 创建多线程程序（必须继承Thread
 * 方式一：
   1.创建一个Thread子类
   2.在Thread子类中重写Thread类中的run方法，设置线程作用(干什么?)
   3.创建Thread类子类的对象
   4.调用Thread类中的start方法，开启新的线程，执行run方法
void start()使该线程开始执行（开辟一条新的cpu的新路径来执行run方法）
 结果是两个线程同时运行：当前线程（从调用返回到start方法）和另一个线程（执行其run方法）。
不止一次启动线程是不合法的。 特别地，一旦线程完成执行就可能不会重新启动。
java属于抢占式调度，若等级一样，那便随机
 */
-------------------------------------
3.创建线程方式二
 * Thread(Runnable target) 分配一个新的 Thread对象。
 Runnable接口应由任何类实现，其实例将由线程执行。 该类必须定义一个无参数的方法，称为run 。
  1. 定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体是为该线程设置任务。
  2. 创建Runnable接口实现类的实例，创建Thread对象,构造方法中传递Runnable接口实现类对象，该Thread对象才是真正的线程对象。
  3. 调用线程对象的start()方法来启动线程，开启新的run。
 */。
-------------------------------------------
4.实现Runnable接口比继承Thread类所具有的优势：
1. 可以避免java中的单继承的局限性。
方法一采用MyThread01 mt = new MyThread01();
一个类只能继承一个类，而方法二采用Runnable接口，还可以继承其他类
2. 增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。
Runnable接口方法，能将设置线程任务与开启新线程进行分离
Runnable01 run = new Runnable01();
Thread thread = new Thread(run);
Thread t = new Thread(new Runnable01())
------------------------------------------------
5.匿名内部类
 * 匿名内部类：简化代码
 * 将子类继承父类，重写接口中的方法，创建子类对象合一步完成
 * 格式：
 * 	new 父类/接口(){
 * 		重复父类/接口中的方法
 * }.start;

//实现父类
new Thread() {
	@Override
	public void run() {
		for (int i = 0; i < 20; i++) {
		System.out.println(Thread.currentThread().getName()+"---->thread"+i);
		}
	}
}.start();
------------		
//实现接口  ----->让设置线程任务与开启新线程进行分离
Runnable run = new Runnable() {
	public void run() {
		for (int i = 0; i < 20; i++) {
			System.out.println(Thread.currentThread().getName()+"---->Runnable"+i);
		}
	};
};
Thread thread = new Thread(run);
thread.start();
------>也可直接丢进new Thread中简化
-----------------------------------------------------
6.线程安全问题
线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作，这样，就容易产生线程不同步
-----------------
synchronized线程同步机制
为了保证每个线程都能正常执行原子操作,Java引入了线程同步机制。
1. 同步代码块。
2. 同步方法。
3. 锁机制。

--------
 1.同步代码块:
运用了一个锁对象---也叫对象锁，也叫对象监视器
对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁.
1. 锁对象 可以是任意类型。
2. 多个线程对象 要使用同一把锁。

 * synchronized(同步锁){
 * 需要同步操作的代码
 * }
t0在进入同步代码块之前，拿走同步锁，在执行完同步代码块之后归还锁
而同时，t1在进入同步代码块时，发现同步锁已经被拿走，那么只能停下来等
但是程序不断停下来判断锁，拿走锁，放下锁，会使效率过低
-------------
 2. 同步方法。
 * public synchronized void method(){
 * 可能会产生线程安全问题的代码
 * }
 * 同步锁是谁?
 * 1)对于非static方法,同步锁就是this。
 * 	即可用
 * public synchronized void payTicket() {
 * 	synchronized(this){
 * 	.....}
 * }
 * 2)对于static方法,同步锁是当前方法所在类的字节码对象(类名.class)。
静态方法的锁对象，不是this，因为this是创建对象后产生的，而静态方法优先于对象产生
 * public static synchronized void payTicket() {
 * 	synchronized(RunnableTicket.class){
 * 	.....}
 * }
---------------
3. 锁机制。
Lock实现提供更广泛的锁定操作可以比使用 synchronized获得方法和报表。
 * 3. 锁机制。
 class X {
   private final ReentrantLock lock = new ReentrantLock();
   // ...

   public void m() {
     lock.lock();  // block until condition holds
     try {
       // ... method body
     } finally {
       lock.unlock()//将unlock写到finally中，更高效
     }
   }
 }