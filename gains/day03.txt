1.今天看完了缓冲流，考虑明天看完序列流，在学java的同时，开始预习编译原理，计网，操作系统，数据库
2.进行了之前一些习题的回顾练习，想快点进入网络编程啊啊啊啊
--------------------------------------------
1./*
 * 缓冲流,也叫高效流，是对4个基本的FileXxx 流的增强，所以也是4个流，按照数据类型分类： 
 * 字节缓冲流： BufferedInputStream ， BufferedOutputStream
 * 字符缓冲流： BufferedReader ， BufferedWriter
 * 缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，
 * 通过缓冲区读写，减少系统IO次数，从而提高读写的效率。
 */
----------------------------------------------------
2./*
 * BufferedOutputStream(OutputStream out) 创建一个新的缓冲输出流，以将数据写入指定的底层输出流。  （大小默认）
 * BufferedOutputStream(OutputStream out, int size)  创建一个新的缓冲输出流，以便以指定的缓冲区大小将数据写入指定的底层输出流。  
 * OutputStream out :字节输出流
 * 	size：指定缓冲流内部缓冲区大小
-------------------
也可直接进行BufferedOutputStream（new FileoutputStrem）
 * 步骤：
 * 1.创建FileoutputStrem对象，绑定输出目的地
 * 2.创建BufferedOutputStream对象，传递OutputStream对象，提高效率
 * 3.使用BufferedOutputStream中的write方法，写入到内部缓冲区
 * 4.使用BufferedOutputStream中的flush方法，刷新到文件中
 * 5.释放资源，因此第四步可省略
 */
-----------------------------------------------
3.字符缓冲输出流
/*特有方法：根据系统不一样获取不同分隔符
 * void newLine() 
 * 写一行行分隔符。  
 */------------------------>读源码可知，println调用newline()
//步骤与writer差不多
-----------------------------------------------
4.字符缓冲输入流
/*
 * 特有方法：
 * String readLine() 
 * 读一行文字。  
 * 读一行文字。 一行被视为由换行符（'\ n'），回车符（'\ r'）中的任何一个或随后的换行符终止。  
 * 返回：包含行的内容的字符串，不包括任何行终止字符，如果已达到流的末尾，则为null 
 */
String s;		
while((s = br.readLine() )!=null) 
	System.out.println(s); 
----------------------------------------
5.
nextInt() 
将输入的下一个标记扫描为 int 。 
获取键盘输入的一个int数字，int num= sc.nextInt();
获取键盘输入的一个字符串，String num= sc.next();
----------------------------------------------
6.（习题回顾）
ArrayList提供了一个将List转为数组的一个非常方便的方法toArray
boolean contains（）方法判断是否存在
----------------------------------------------
缓冲流给我的感觉和普通字节字符步骤差不多
算是加强版，效率提高不少
得记住，在用buff之前，要先new普通版对象
记住俩特有方法：
 void newLine()  、  String readLine() 
一个写行，一个读行
 */------------------------>读源码可知，println调用newline()

不过啥时候flush还没搞懂，明天看看



