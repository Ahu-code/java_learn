2020/2/19
1.对字节流、字符流进行了初步掌握
写入数据的原理：(即输出流)
java程序->JVM虚拟机->os操作系统->OS调用写数据的方法->将数据写入文件
读取数据原理：硬盘->内存(即输入流)
java->JVM->Os->Os读取数据的方法->读取文件
----------------------------------------------------------------
2.大致步骤
以字节输出流为例：
 * 1.创建一个FileOutputStream对象，构造方法写入数据的目的地
 * 2.调用FileOutpuStream对象中的write（/read——输入流）方法，将数据写入文件中
-----------------------字符输出流在此会增加一个flush方法
 * 3.释放资源
---------------------------------------------------------------
3.总的注意事项：
1. 虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。将10进制转化为二进制
2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。
3. 文件找不到异常是IO异常的子类（所以异常就填IO）
--------------------------------------------------------
4.字符输入流（Reader）大致与字节输入流FileInputStream差不多
但字符输出流（Writer）与字符输出流FileOutputStream存在较大区别
主要在close之前，需要进行flush刷新缓存区，因为字符输出时，通过write将其写入并非磁盘，而是先写入到缓冲区中进行字符转换为字节，因此需要进行flush清空缓存区
 * flush 与 close的区别
 * 那么这样一来我们如果中途调用close()方法，输出区也还是有数据的，
 * 就像水缸里有水，只是在缓冲区遗留了一部分，
 * 这时如果我们先调用flush()方法，就会强制把数据输出，缓存区就清空了，最后再关闭读写流调用close()就完成了。
---------------------------------------------------
5.字节输出流为例方法：（字符输出流大致相同）
  1.//写入字符数组
//char[] ch = {'a','b','c'};
//fw.write(ch);
  2.//写入字符串
fw.write("字符串",0,2); //最后一个参数为长度
  3.字节输出流
/*若一次性写多个字节：
 * 	若第一个字节为正，那么显示ASCII表
 * 	若第一个为负数，则与第二个一起组成中文
 */
  4.字符串的写入
byte[] bytes2 = "你好".getBytes();————进行字节转换
		System.out.println(bytes2);
		fos.write(bytes2);
  5.追加续写
/*
 * 使用两个参数的构造方法即可
 * FileOutputStream(File file, boolean append) 
 * 创建文件输出流以写入由指定的 File对象表示的文件。 
 * FileOutputStream(String name, boolean append) 
 * 创建文件输出流以指定的名称写入文件。 
 * 	String name 和 File file	 写入数据的目的地
 * 	boolean append :追加开关
 *	     true:创建对象不会覆盖原文件，继续在文件的末尾追加数据
 *             	     false:创建新文件覆盖原文件
 */
  6.写换行：
换行符号：windows \r\n   linus /n  mac /r
---------------------------------------------------
6.以字节输入流为例方法
  1.read，close
  2.重点：
//文件最后一位以-1结尾，文件读入指针往后移
while((len01=fis.read())!=-1) {
	System.out.println((char)len01);
}

byte[] bytes = new byte[2];
int len = fis.read(bytes);
System.out.println(len);
System.out.println(Arrays.toString(bytes));
System.out.println(new String(bytes));//ab
是由于最后一次读取时，只读取一个字节e ，数组中，上次读取的数据没有被完全替换，所以要通过len ，获取有效的字节
---------------//即数组具有缓冲作用，存储之前读取的多个个字节
--------------->>进行优化（new String 类）
byte[] bytes = new byte[1024];//用1024的整数倍进行缓存
int len = 0;
while((len=fis.read(bytes)) != -1)
	System.out.println(new String(bytes, 0, len));
因为bytes数组是一直进行交换存储，而读取指针是一直进行向后走，一直到指向-1

