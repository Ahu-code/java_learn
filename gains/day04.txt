今天学了转换流，序列化流，打印流
转换流即改变字符集输入输出
序列化流即为一种存储对象机制
打印流将利用println不止可以打印在控制台，也可setOut到其他指定地方
=====================================
=====================================
=====================================
summary：
1.转换流格式：
InputStreamReader isr = new InputStreamReader(new FileInputStream("F:\\a.txt"), "GBK");
2.关于flush：
flush是write 和 output特有
close时会调用flush，但若此时还不能关闭，且为长连接传输（可能大于缓冲池），用flush，将缓冲池内数据刷新进去
-------------
3.序列化操作
 * 一个对象要想序列化，必须满足两个条件:
     该类必须实现Serializable 接口，
   Serializable 是一个标记接口，(源码中啥都没有（该类要记得重写toStirng）
 *  加上该接口后，进行序列化时，会加上一个序列号
 *  serialVersionUID
 * 2.  该类的所有属性必须是可序列化的。
如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。
---------------
4.序列化流格式：
FileInputStream fis = new FileInputStream("F:\\a.txt");
ObjectInputStream ois = new ObjectInputStream(fis);
----
使用Object类进行强转
Object o = ois.readObject();
Person p = (Person)o;
----------------------------
5.打印流格式：//将控制台输出改为文件输出
PrintStream ps = new PrintStream("F:\\a.txt");
System.setOut(ps);
System.out.println("在文件输出");
=====================================
=====================================
=====================================
1.常见字符集
  1.ASCII字符集 ：
ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。
基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。
  2.ISO-8859-1字符集：
拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。
ISO-5559-1使用单字节编码，兼容ASCII编码。
  GBxxx字符集：
  GB就是国标的意思，是为了显示中文而设计的一套字符集。
  3.GB2312：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的"全角"字符，而原来在127号以下的那些就叫"半角"字符了。
GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。
 4.Unicode字符集 ：
Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。
它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。
UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：
1. 128个US-ASCII字符，只需一个字节编码。
2. 拉丁文等字符，需要二个字节编码。
3. 大部分常用字（含中文），使用三个字节编码。
4. 其他极少使用的Unicode辅助字符，使用四字节编码。
-------------------------------------------------
2.转换流是从字符流到字节流的桥梁
/*
 * 转换流java.io.OutputStreamWriter ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符
 * 编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。
 * 构造方法
 * OutputStreamWriter(OutputStream in) : 创建一个使用默认字符集的字符流。
 * OutputStreamWriter(OutputStream in, String charsetName) : 创建一个指定字符集的字符流。
 */
----------------------------------------------
4.序列化与反序列化
将一个对象转化为二进制的byte流（注意，不是bit流）
Java 提供了一种对象序列化的机制。用一个字节序列可以表示一个对象，该字节序列包含该对象的数据、对象的类型和对象中存储的属性等信息。字节序列写出到文件之后，相当于文件中持久保存了一个对象的信息。
反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化。对象的数据、对象的类型和对象中存储的数据信息，都可以用来在内存中创建对象。看图理解序列化：
/* 
 *  ObjectOutputStream类
 * java.io.ObjectOutputStream 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。
 * 构造方法：
 * protected  ObjectOutputStream() 
 * 为完全重新实现ObjectOutputStream的子类提供一种方法，不必分配刚刚被ObjectOutputStream实现使用的私有数据。  
 * ObjectOutputStream(OutputStream out) 
 * 创建一个写入指定的OutputStream的ObjectOutputStream。  
 * 构造举例，代码如下：
FileOutputStream fos = new FileOutputStream("F:\\a.txt");
ObjectOutputStream oos = new ObjectOutputStream(fos);
oos.writeObject(new Person("小美女",18));
 * ----------------------------
 * 序列化操作
 * 一个对象要想序列化，必须满足两个条件:
 * 1.  该类必须实现java.io.Serializable 接口， Serializable 是一个标记接口，(源码中啥都没有（该类要记得重写toStirng）
 *  加上该接口后，进行序列化时，会加上一个序列号
 *  serialVersionUID
 *   不实现此接口的类将不会使任何状态序列化或反序列化，会抛出NotSerializableException 。
 * 2.  该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用transient 关键字修饰。
 * (static 静态变量不能被序列化，因为其不为对象，
而transient 关键字修饰为非静态（瞬态），也不可序列化。
 */
不能被序列化，并不是这个属性不存在了，而是属性的值无法被保存起来，也就是该属性的值就是默认值，相当于在创建类定义属性的时候不赋值，就是默认值。
----------------------------------------------
5.反序列化
/*
 * ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。
 * 构造方法
 * public ObjectInputStream(InputStream in) ： 创建一个指定InputStream的ObjectInputStream。
 * 反序列化操作1
 * 如果能找到一个对象的class文件，我们可以进行反序列化操作，调用ObjectInputStream 读取对象的方法：
 * public final Object readObject () : 读取一个对象。
 * 
 * 实例化举例：
	FileInputStream fis = new FileInputStream("F:\\a.txt");
	ObjectInputStream ois = new ObjectInputStream(fis);
 */
使用Object进行强转
Object o = ois.readObject();
Person p = (Person)o;
------------------------------------------
6.public class NotSerializableException
extends ObjectStreamException抛出一个实例需要一个Serializable接口。 序列化运行时或实例的类可能会抛出此异常。 参数应该是类的名称。
----------------------------------------------------
7.readObject();除了IO异常还有ClassNotFoundException 异常
即当不存在对象的class文件时，抛出此异常
-----------------------------------------------------------
8.InvalidClassException 异常。——每次修改类的定义时，都会给class文件生成一个序列号
解决方案：无论是否修改，都不改变序列号，即自己定义一个final序列号
发生这个异常的原因如下：
该类的序列版本号与从流中读取的类描述符的版本号不匹配
该类包含未知数据类型
该类没有可访问的无参数构造方法
解决措施：
public class Person implements Serializable{
	//可以自己定义一个final序列号，这样就不会改变了
	private static final long serialVersionUID = 42L;
	private String name;
	private int age;
}	
---------------------------------------------
9./* 打印流
 * FilterOutputStream  extends OutputStream  
 * 平时我们在控制台打印输出，是调用print 方法和println 方法完成的，这两个方法都来自于PrintStream 类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。
 * ----------------------
 * 构造方法   
 * PrintStream(File file) 创建一个新的打印流，不带自动行刷新，用指定的文件。  
 * PrintStream(OutputStream out) 创建一个新的打印流。  
 * PrintStream(String fileName) 创建一个新的打印流，没有自动行刷新，用指定的文件名。  
 */
PrintStream ps = new PrintStream("F:\\a.txt");
ps.write(97);
ps.println(97);
运用父类的write方法，查看数据时需要查看ACSII码
但运用println写进时，写的数据原样输出
-----------------------------------------------
10/*
 * 改变打印流向
 * System.out 就是PrintStream 类型的，只不过它的流向是系统规定的，打印在控制台上。
 * 不过，既然是流对象，我们就可以玩一个"小把戏"，改变它的流向。
 * ------------------------------------
 * 使用System.setOut方法改变输出语句的目的地改为参数中传递的打印流的目的地
 * static void setOut(PrintStream out) //标位置
 * 重新分配标准输出流。  
 */
PrintStream ps = new PrintStream("F:\\a.txt");
System.setOut(ps);
System.out.println("在文件输出");
